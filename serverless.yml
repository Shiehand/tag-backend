# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tag-backend
# app and org for use with dashboard.serverless.com
app: tag-backend-app
org: andrewshieh7379

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-1
  environment:
    userTagTable: ${self:custom.userTagTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
plugins:
  - serverless-webpack

package:
  individually: true

custom:
  userTagTable: user-tag

functions:
  getTag:
    handler: lambdas/functions/getTag.handler
    events:
      - http:
          path: user/{username}/tag/{tagName}
          method: GET
          cors: true
          # authorizer:
          #   arn: !GetAtt CognitoUserPool.Arn
  createTag:
    handler: lambdas/functions/createTag.handler
    events:
      - http:
          path: users/{username}/tag
          method: POST
          cors: true
          # authorizer:
          #   arn: !GetAtt CognitoUserPool.Arn

# you can add CloudFormation resource templates here
resources:
  Resources:
    userTagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTagTable}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
